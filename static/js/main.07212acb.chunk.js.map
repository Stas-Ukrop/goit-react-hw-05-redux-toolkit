{"version":3,"sources":["component/ListContact/ListContact.module.css","component/ListContact/reduxTodo/type.js","component/ListContact/reduxTodo/todo-action.js","component/ListContact/reduxTodo/todo-reducer.js","redux/store.js","component/ListItem/ListItem.js","component/ContactForm/ContactForm.js","component/ListContact/ListContact.js","App.js","index.js","component/ContactForm/ContactForm.module.css"],"names":["module","exports","addTodo","createAction","type","text","number","payload","id","shotid","generate","deleteTodo","filter","items","createReducer","action","state","includesContacts","array","contact","map","item","includes","alert","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","PersistConfig","key","storage","blacklist","store","configureStore","reducer","todos","persistReducer","Reducer","devTools","process","persistor","persistStore","ListItem","mass","onDelete","undefined","onClick","connect","dispatch","addContactToRedux","todosActions","useState","nameContact","setContact","className","styles","mainConteiner","conteiner","name","value","onChange","event","target","button","getVisibleTodos","allTodos","normalizedFilter","toLowerCase","massOfContacts","onFilter","filterText","setFilterText","useEffect","inputTextFilter","placeholder","e","currentTarget","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.07212acb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputTextFilter\":\"ListContact_inputTextFilter__Z_8z8\"};","export default {\r\n  ADD: \"todos/add\",\r\n  DELETE: \"todos/delete\",\r\n  FILTER: \"todos/changeFilter\",\r\n};\r\n","import shotid from \"shortid\";\r\nimport type from \"./type\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addTodo = createAction(type.ADD, (text, number) => {\r\n  return {\r\n    payload: {\r\n      id: shotid.generate(),\r\n      text,\r\n      number,\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteTodo = createAction(type.DELETE);\r\n\r\nconst filter = createAction(type.FILTER);\r\n\r\nexport default { addTodo, deleteTodo, filter };\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport action from \"./todo-action\";\r\nconst items = createReducer([], {\r\n  [action.addTodo]: (state, action) => includesContacts(state, action),\r\n  [action.deleteTodo]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [action.filter]: (state, { payload }) => payload,\r\n});\r\n\r\nconst includesContacts = (array, contact) => {\r\n  const includeContacts = array.map((item) => item.text);\r\n  if (includeContacts.includes(contact.payload.text)) {\r\n    alert(`${contact.payload.text} phone number  is  already in contacts`);\r\n    return array;\r\n  }\r\n  return [...array, contact.payload];\r\n};\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport Reducer from \"../component/ListContact/reduxTodo/todo-reducer\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst PersistConfig = {\r\n  key: \"contact\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\nconst store = configureStore({\r\n  reducer: {\r\n    todos: persistReducer(PersistConfig, Reducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListItem = ({ mass, onDelete }) => {\r\n  return (\r\n    <ul>\r\n      {mass !== undefined &&\r\n        mass.map(({ id, text, number }) => {\r\n          return (\r\n            <li key={id}>\r\n              <span> {text} : </span>\r\n              <span> {number}</span>\r\n              <button type=\"button\" onClick={() => onDelete(id)}>\r\n                Удалить\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n    </ul>\r\n  );\r\n};\r\nexport default ListItem;\r\n\r\nListItem.propTypes = {\r\n  mass: PropTypes.array,\r\n  onDelete: PropTypes.func,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport todosActions from \"../ListContact/reduxTodo/todo-action\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nconst ContactForm = ({ addContactToRedux }) => {\r\n  const [contact, setContact] = useState({\r\n    nameContact: \"\",\r\n    number: \"\",\r\n  });\r\n  const addContact = () => {\r\n    if (contact.nameContact !== \"\" && contact.number !== \"\") {\r\n      addContactToRedux(contact.nameContact, contact.number);\r\n      setContact({\r\n        nameContact: \"\",\r\n        number: \"\",\r\n      });\r\n    } else {\r\n      alert(\"Пожалуйста введите все данные в поля формы\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.mainConteiner}>\r\n      <div className={styles.conteiner}>\r\n        <label>Input name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"nameContact\"\r\n          value={contact.nameContact}\r\n          onChange={(event) => {\r\n            setContact((contact) => ({\r\n              ...contact,\r\n              [event.target.name]: event.target.value,\r\n            }));\r\n          }}\r\n        ></input>\r\n      </div>\r\n      <div className={styles.conteiner}>\r\n        <label>Input number</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"number\"\r\n          value={contact.number}\r\n          onChange={(event) => {\r\n            setContact((contact) => ({\r\n              ...contact,\r\n              [event.target.name]: event.target.value,\r\n            }));\r\n          }}\r\n        ></input>\r\n      </div>\r\n      <button type=\"button\" onClick={addContact} className={styles.button}>\r\n        Добавить контакт\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addContactToRedux: (text, number) =>\r\n    dispatch(todosActions.addTodo(text, number)),\r\n});\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  addContactToRedux: PropTypes.func,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ListItem from \"../ListItem\";\r\nimport { connect } from \"react-redux\";\r\nimport todosActions from \"./reduxTodo/todo-action\";\r\nimport ContactForm from \"../ContactForm\";\r\nimport styles from \"./ListContact.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListContact = ({ massOfContacts, onDelete, onFilter }) => {\r\n  const [filterText, setFilterText] = useState(\"\");\r\n  useEffect(() => {\r\n    onFilter(filterText);\r\n  }, [filterText]);\r\n\r\n  return (\r\n    <div className=\"blockText\">\r\n      <input\r\n        type=\"text\"\r\n        className={styles.inputTextFilter}\r\n        placeholder=\"фильт\"\r\n        onChange={(e) => {\r\n          setFilterText(e.currentTarget.value);\r\n        }}\r\n      ></input>\r\n      <ContactForm />\r\n      <ListItem mass={massOfContacts} onDelete={onDelete} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getVisibleTodos = (allTodos, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allTodos.filter(({ text }) =>\r\n    text.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ todos: { items, filter } }) => ({\r\n  massOfContacts: getVisibleTodos(items, filter),\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDelete: (id) => dispatch(todosActions.deleteTodo(id)),\r\n  onFilter: (text) => dispatch(todosActions.filter(text)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListContact);\r\n\r\nListContact.propTypes = {\r\n  massOfContacts: PropTypes.array,\r\n  onDelete: PropTypes.func,\r\n  onFilter: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport ListContact from \"./component/ListContact\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <ListContact />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"conteiner\":\"ContactForm_conteiner__wTKFC\",\"mainConteiner\":\"ContactForm_mainConteiner__s6u8S\"};"],"sourceRoot":""}