{"version":3,"sources":["component/ListTodo/reduxTodo/type.js","component/ListTodo/reduxTodo/todo-action.js","component/ListTodo/reduxTodo/todo-reducer.js","redux/store.js","component/counter/Counter.js","redux/action.js","component/ListItem/ListItem.js","component/ContactForm/ContactForm.js","component/ListTodo/ListTodo.js","App.js","index.js"],"names":["addTodo","createAction","type","text","number","payload","id","shotid","generate","deleteTodo","filter","items","createReducer","action","state","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","todosPersistConfig","key","storage","blacklist","store","configureStore","reducer","todos","persistReducer","todoReducer","devTools","process","persistor","persistStore","connect","value","counter","step","dispatch","onIncrement","increment","onDecrement","decrement","onClick","ListItem","mass","onDeleteTodo","undefined","map","addContactToRedux","todosActions","useState","nameContact","contact","setContact","name","onChange","event","target","alert","getVisibleTodos","allTodos","normalizedFilter","toLowerCase","includes","onFilter","filterText","setFilterText","useEffect","className","placeholder","e","currentTarget","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.56787027.chunk.js","sourcesContent":["export default {\r\n  ADD: \"todos/add\",\r\n  DELETE: \"todos/delete\",\r\n  TOGGLE_COMPLETED: \"todos/toggleCompleted\",\r\n  FILTER: \"todos/changeFilter\",\r\n};\r\n","import shotid from \"shortid\";\r\nimport type from \"./type\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addTodo = createAction(type.ADD, (text, number) => {\r\n  return {\r\n    payload: {\r\n      id: shotid.generate(),\r\n      text,\r\n      number,\r\n    },\r\n  };\r\n});\r\n// const addTodo = (text, number) => ({\r\n// type: type.ADD,\r\n// payload: {\r\n// id: shotid.generate(),\r\n// text,\r\n// number,\r\n// },\r\n// });\r\nconst deleteTodo = createAction(type.DELETE);\r\n// const deleteTodo = (id) => ({\r\n// type: type.DELETE,\r\n// payload: id,\r\n// });\r\nconst filter = createAction(type.FILTER);\r\n// const filter = (text) => ({\r\n// type: type.FILTER,\r\n// payload: text,\r\n// });\r\n\r\nexport default { addTodo, deleteTodo, filter };\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport action from \"./todo-action\";\r\nconst items = createReducer([], {\r\n  [action.addTodo]: (state, { payload }) => [...state, payload],\r\n  [action.deleteTodo]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n// const item = (state = [], { type, payload }) => {\r\n// switch (type) {\r\n// case types.ADD:\r\n// return [...state, payload];\r\n// case types.DELETE:\r\n// return state.filter(({id})=>id!==payload);\r\n// default:\r\n// return state;\r\n// }\r\n// };\r\nconst filter = createReducer(\"\", {\r\n  [action.filter]: (state, { payload }) => payload,\r\n});\r\n// const filter = (state = \"\", { type, payload }) => {\r\n// switch (type) {\r\n// case types.FILTER:\r\n// return payload;\r\n// default:\r\n// return state;\r\n// }\r\n// };\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport todoReducer from \"../component/ListTodo/reduxTodo/todo-reducer\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst todosPersistConfig = {\r\n  key: \"todos\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\nconst store = configureStore({\r\n  reducer: {\r\n    todos: persistReducer(todosPersistConfig, todoReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { increment, decrement } from \"../../redux/action\";\r\nconst Counter = ({ value, onIncrement, onDecrement, step }) => {\r\n  return (\r\n    <>\r\n      <span>{value}</span>\r\n      <button type=\"button\" onClick={() => onIncrement(step)}>\r\n        +{step}\r\n      </button>\r\n      <button type=\"button\" onClick={() => onDecrement(step)}>\r\n        -{step}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    value: state.counter.value,\r\n    step: state.counter.step,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onIncrement: (value) => dispatch(increment(value)),\r\n    onDecrement: (value) => dispatch(decrement(value)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\r\n","export const increment = (value) => ({\r\n  type: \"counter/Increment\",\r\n  payload: value,\r\n});\r\nexport const decrement = (value) => ({\r\n  type: \"counter/Decrement\",\r\n  payload: value,\r\n});\r\n","import React from \"react\";\r\n\r\nconst ListItem = ({ mass, onDeleteTodo }) => {\r\n  return (\r\n    <ul>\r\n      {mass !== undefined &&\r\n        mass.map(({ id, text, number }) => {\r\n          return (\r\n            <li key={id}>\r\n              <p> {text}:</p>\r\n              <span> {number}</span>\r\n              <button type=\"button\" onClick={() => onDeleteTodo(id)}>\r\n                Удалить\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n    </ul>\r\n  );\r\n};\r\nexport default ListItem;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport todosActions from \"../ListTodo/reduxTodo/todo-action\";\r\n\r\nconst ContactForm = ({ addContactToRedux }) => {  \r\n  const [contact, setContact] = useState({\r\n    nameContact: \"\",\r\n    number: \"\",\r\n  });\r\n  const addContact = () => {\r\n    if (contact.nameContact !== \"\" && contact.number !== \"\") {\r\n      addContactToRedux(contact.nameContact, contact.number);\r\n    } else {\r\n      alert(\"Пожалуйста введите все данные в поля формы\");\r\n    }\r\n  };\r\n  //   const addContact = () => {\r\n  //\r\n  //   addContacts((contact.id = uuidv4()), contact.nameContact, contact.number);\r\n  //   setContact({ id: \"\", nameContact: \"\", number: \"\" });\r\n  //   for (let i = 0; i < inputText.length; i++) {\r\n  // inputText[i].value = \"\";\r\n  //   }\r\n  // } else {\r\n  //   alert(\"Пожалуйста введите все данные в поля формы\");\r\n  // }\r\n  //   };\r\n  return (\r\n    <div>\r\n      <label>Input name</label>\r\n      <br />\r\n      <input\r\n        type=\"text\"\r\n        name=\"nameContact\"\r\n        onChange={(event) => {\r\n          setContact((contact) => ({\r\n            ...contact,\r\n            [event.target.name]: event.target.value,\r\n          }));\r\n        }}\r\n      ></input>\r\n      <br />\r\n      <label>Input number</label>\r\n      <br />\r\n      <input\r\n        type=\"text\"\r\n        name=\"number\"\r\n        onChange={(event) => {\r\n          setContact((contact) => ({\r\n            ...contact,\r\n            [event.target.name]: event.target.value,\r\n          }));\r\n        }}\r\n      ></input>\r\n      <br />\r\n      <button type=\"button\" onClick={addContact}>\r\n        Добавить контакт\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addContactToRedux: (text, number) =>\r\n    dispatch(todosActions.addTodo(text, number)),\r\n});\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  addContacts: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  }),\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./ListTodo.module.css\";\r\nimport ListItem from \"../ListItem\";\r\nimport { connect } from \"react-redux\";\r\nimport todosActions from \"./reduxTodo/todo-action\";\r\nimport ContactForm from \"../ContactForm\";\r\n\r\nconst ListTodo = ({ todos, onDeleteTodo, onFilter }) => {\r\n  const [filterText, setFilterText] = useState(\"\");\r\n  useEffect(() => {\r\n    onFilter(filterText);\r\n  }, [filterText]);\r\n\r\n  return (\r\n    <div className=\"blockText\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"inputText\"\r\n        placeholder=\"фильт\"\r\n        onChange={(e) => {\r\n          setFilterText(e.currentTarget.value);\r\n        }}\r\n      ></input>\r\n      <ContactForm />\r\n      <ListItem mass={todos} onDeleteTodo={onDeleteTodo} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getVisibleTodos = (allTodos, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allTodos.filter(({ text }) =>\r\n    text.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ todos: { items, filter } }) => ({\r\n  todos: getVisibleTodos(items, filter),\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteTodo: (id) => dispatch(todosActions.deleteTodo(id)),\r\n  onFilter: (text) => dispatch(todosActions.filter(text)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListTodo);\r\n","import React from \"react\";\r\nimport Counter from \"./component/counter\";\r\nimport ListTodo from \"./component/ListTodo\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      {/* <Counter /> */}\r\n      <ListTodo />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}